#!/usr/bin/env python3

from bs4 import BeautifulSoup

od = ["name", "op", "cycles", "addr_mode", "asm", "bytes", "page"]

translate = {
        "implied":"Implied",
        "immediate":"Immediate",
        "relative":"Relative",
        "accumulator":"Accumulator",
        "absolute": "Absolute",
        "absolute,X": "AbsoluteX",
        "absolute,Y": "AbsoluteY",
        "zeropage":"ZeroPage",
        "zeropage,X":"ZeroPageX",
        "zeropage,Y":"ZeroPageY",
        "indirect":"Indirect",
        "(indirect,X)":"IndirectX",
        "(indirect),Y":"IndirectY",
        }

def parse(f):
    bs = BeautifulSoup(f, "html.parser")
    l = list()
    k = ["addr_mode", "asm", "op", "bytes", "cycles"]
    ops = bs.find_all("dl", class_="opcodes")[0]
    tbs = ops.find_all("table", {"aria-label":"details"})
    for i in tbs:
        for j in i.find_all("tr")[1:]:
            oo = dict(zip(k,[k.text for k in j.find_all("td")]))
            oo["name"] = oo["asm"].split(" ")[0]
           
            # NOTE: wrong html
            if oo["name"] == "BRK":
               oo["cycles"]  = "7  "
               oo["op"] = "0"
               oo["bytes"] = "1"
               oo["asm"] = "BRK"

            policy = oo["cycles"][1:]
            if policy == "**":
                oo["policy"] = "Branch"
            elif policy == "* ":
                oo["policy"] = "Cross"
            else:
                oo["policy"] = "None"

            oo["cycles"] = oo["cycles"][0]
            oo["addr_mode"] = translate[oo["addr_mode"]]

            l.append(oo)

    return l

# requires obj that has od
def gen(ol, fp):
    tmp = """
        Table[{name}{addr_mode}] = Ins{{
            Name: {name},
            Op: 0x{op},
            Mode: {addr_mode},
            Cycles: {cycles},
            Page: {policy},
            Bytes: {bytes},
        }}
    """
    fp.write("""// Code generated by "python gen.py && go fmt"; DO NOT EDIT.

    package ins
    const (
    """)
    for o in ol:
        fp.write("{name}{addr_mode} = 0x{op}\n".format(**o))
    fp.write(")\n")

    fp.write("func init(){\n")
    for o in ol:
        fp.write(tmp.format(**o))
    fp.write("}\n")

    return

if __name__ == "__main__":

    l = list()
    with open("6502_instruction_set.html") as fp:
        l = parse(fp)

    with open("op_gen.go", "w") as fp:
        gen(l, fp)
